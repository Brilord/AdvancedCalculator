/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package advancedcalculator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorGUI extends JFrame implements ActionListener {
    private JTextField inputField;

    public CalculatorGUI() {
        setTitle("Calculator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 400);
        setLocationRelativeTo(null);

        inputField = new JTextField();
        inputField.setEditable(false);
        inputField.setHorizontalAlignment(JTextField.RIGHT);
        add(inputField, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel(new GridLayout(5, 4));
        String[] buttonLabels = {
                "7", "8", "9", "/",
                "4", "5", "6", "*",
                "1", "2", "3", "-",
                "0", ".", "=", "+",
                "sin", "cos", "sqrt", "^"
        };

        for (String label : buttonLabels) {
            JButton button = new JButton(label);
            button.addActionListener(this);
            buttonPanel.add(button);
        }

        add(buttonPanel, BorderLayout.CENTER);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        String currentInput = inputField.getText();

        switch (command) {
            case "=":
                try {
                    double result = evaluateExpression(currentInput);
                    inputField.setText(Double.toString(result));
                } catch (IllegalArgumentException ex) {
                    inputField.setText("Error");
                }
                break;
            case "sin":
                try {
                    double angle = Double.parseDouble(currentInput);
                    double sinValue = Math.sin(Math.toRadians(angle));
                    inputField.setText(Double.toString(sinValue));
                } catch (NumberFormatException ex) {
                    inputField.setText("Error");
                }
                break;
            case "cos":
                try {
                    double angle = Double.parseDouble(currentInput);
                    double cosValue = Math.cos(Math.toRadians(angle));
                    inputField.setText(Double.toString(cosValue));
                } catch (NumberFormatException ex) {
                    inputField.setText("Error");
                }
                break;
            case "sqrt":
                try {
                    double value = Double.parseDouble(currentInput);
                    double sqrtValue = Math.sqrt(value);
                    inputField.setText(Double.toString(sqrtValue));
                } catch (NumberFormatException ex) {
                    inputField.setText("Error");
                }
                break;
            case "^":
                inputField.setText(currentInput + "^");
                break;
            default:
                inputField.setText(currentInput + command);
                break;
        }
    }

    private double evaluateExpression(String expression) {
        try {
            return new Object() {
                int pos = -1, ch;

                void nextChar() {
                    ch = (++pos < expression.length()) ? expression.charAt(pos) : -1;
                }

                boolean eat(int charToEat) {
                    while (ch == ' ') nextChar();
                    if (ch == charToEat) {
                        nextChar();
                        return true;
                    }
                    return false;
                }

                double parse() {
                    nextChar();
                    double x = parseExpression();
                    if (pos < expression.length()) throw new IllegalArgumentException("Unexpected: " + (char) ch);
                    return x;
                }

                double parseExpression() {
                    double x = parseTerm();
                    for (; ; ) {
                        if (eat('+')) x += parseTerm();
                        else if (eat('-')) x -= parseTerm();
                        else return x;
                    }
                }

                double parseTerm() {
                    double x = parseFactor();
                    for (; ; ) {
                        if (eat('*')) x *= parseFactor();
                        else if (eat('/')) x /= parseFactor();
                        else return x;
                    }
                }

                double parseFactor() {
                    if (eat('+')) return parseFactor();
                    if (eat('-')) return -parseFactor();

                    double x;
                    int startPos = this.pos;
                    if (eat('(')) {
                        x = parseExpression();
                        eat(')');
                    } else if ((ch >= '0' && ch <= '9') || ch == '.') {
                        while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
                        x = Double.parseDouble(expression.substring(startPos, this.pos));
                    } else {
                        throw new IllegalArgumentException("Unexpected: " + (char) ch);
                    }

                    if (eat('^')) {
                        x = Math.pow(x, parseFactor());
                    }

                    return x;
                }
            }.parse();
        } catch (Exception e) {
            throw new IllegalArgumentException("Invalid expression");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            CalculatorGUI calculator = new CalculatorGUI();
            calculator.setVisible(true);
        });
    }
}

